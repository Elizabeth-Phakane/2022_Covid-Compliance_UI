import { UserService } from 'src/app/services/user.service';
import { User } from 'src/app/interfaces/user';
import { Component, Inject, OnInit } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { Router } from '@angular/router';
import { delay } from 'rxjs';
@Component({
  selector: 'app-studentcard',
  templateUrl: './studentcard.component.html',
  styleUrls: ['./studentcard.component.css']
})
export class StudentcardComponent implements OnInit {
  isValue!: boolean;
  
  constructor(private route:Router,private userservice:UserService,@Inject(MAT_DIALOG_DATA)public users:User[])
  {

  }


  tempForm: any;
  ngOnInit(): void
  {
    this.onGetUser();
    this.tempForm=new FormGroup
    ({

        Tempareture:new FormControl('',[Validators.required]),
        isAllowedEntrence:new FormControl('',[Validators.required]),
        Health_status_reason:new FormControl('',[Validators.required]),
        //Officer_id: new FormControl('')
      
    }) 
    
  }


 /*  get Officer_id()
  {
    return this.tempForm.get('Officer_id');
  } */

  get Tempareture()
  {
    return this.tempForm.get('Tempareture');
  }
  get isAllowedEntrence()
  {
    return this.tempForm.get('isAllowedEntrence');
  }

  get Health_status_reason()
  {
    return this.tempForm.get('Health_status_reason');
  }

  onGetUser(): void 
  {
    this.userservice.getUser(`${sessionStorage.getItem('user_id')}`).subscribe(
      (response: any) =>
      {

        console.log(response)
        this.users = response.data;
        console.log(this.users)

      },
      (error: any) => console.log('this is the error' + error),
      () => console.log('Done getting user'),
    );
  }

  onUpdateRecord()
  {
    this.userservice.updateRecord(this.tempForm.value,2).subscribe(
      (response: any)=>
      {
        console.log(response);
        console.log('Update successful');
      },
      (error: any) => console.log('this is the error' + error),
      () => console.log('Done getting user'),
    )
    
  }


  //token:string='';

  token=this.GetToken();

  GetToken():any
  {
    localStorage.getItem('token')
  }
  //random generated by the machine
  studenttemp=this.getRandomInt(34,40);

  getRandomInt(min: number, max: number) : number
  {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min; 
  }


  //Check entrace status
  //temp2:number=0.0;
  message="";

  async onSubmit()
  {
    this.route.navigate(['officer']);
    if(this.tempForm.valid && this.checkAccessValue(this.isAllowedEntrence))
    {
      //alert('Form is valid')
      this.temperatureCheck(this.Tempareture.value);
      await delay(1000);
      this.onUpdateRecord();
      location.reload();
      this.tempForm.reset();
      
    }
    else if(this.tempForm.valid && !this.checkAccessValue(this.isAllowedEntrence))
    {
      alert('Enter valid access value')
    }
    else
    {
      alert('Please complete the temperature')
    }
   
  }

  

  checkAccessValue(access:Number)
  {
     if(isNaN(+access))
     {
       this.isValue=true;
     }
     else
     {
       this.isValue=false;
     }

     return this.isValue;
  }

  temperatureCheck(temp:Number)
  {
    if(temp===0)
    {
      this.message="Please enter valid temperature";
    }
    if (temp>=35.0 && temp <=37.0)
    {
      this.message="Allow access";
      console.log(this.message)
      
    }
     if(temp > 37.0)
    {
      this.message ="Deny access,Temperature too high";
      console.log(this.message)
    }
     if(temp<35.0)
    {
      this.message ="Deny access,Temperature too low";
      console.log(this.message)
    }
  }



}

